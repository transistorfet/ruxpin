
* goal is to get a shell-type program
----

* add an events system for processes to wait on

* since there's no reference counting of the segments, it might free all the pages when destroying the translation table of the
  first process to be destroyed (processes aren't actually destroyed yet though)

* there is a bug with translation tables where, when mapping the stack, it asks for page_size * page_size, so gets mapped as a 2MiB
  granuale instead of individual pages, even though the memory is backed by the page fault allocator, which expects to have single
  pages.
* in fact, since there might already be a page fault that occurs to load the first stack page, it should cause an error if, when
  updating the page address of the translation table, the granuale size is not a page!


* implement fork
* implement wait/wait_pid

* this is at least the second time I've had an issues with the length of mapped segment not aligned to a page boundary, in the mmu
  translation table code, which causes an infinite loop with no other indications.  I should fix this in a way that throws an error
* make it consistent whether you use a usize length or a start/end address, not both


* processes are never removed, which needs to be fixed
* I'm not happy about how the process manager is going.  It's difficult to remove a process.  It's possible to use an Option and
  reallocate old proc slots when needed, but that's unnecessarily slow, especially given that the process slots in the manager are
  just Arcs.  Putting the linked list inside the Arc would be possible, but kind of clusmy, and it exposes the linked list node when
  anything using the a Process shouldn't even know about it, let alone use it.  


* there was an issue with the console driver when the raw device was wrapped in a spinlock.  It was causing a data abort to some
  weird address, and then looping forever (no timeout)
* need to sort out the tty devices. how irqs can access the device object. whether only the tty subsystem or the driver as well, has
  a reference to the devices as well. how the config will create the device object, and where it stores it (or does it assume each
  driver will register and save global references to the devices if needed?  Is there a better way than using so many global references?


* there is no userspace/kernelspace copying in the api, which could cause a fatal error if the user program doesn't give a valid
  input, so at some point this needs to be added
* does the linux copy user/kernel function do manual page lookups, including triggering page loading?  Or does it do soemthing else?
* why does saving the floating point regs cause a null pointer exception?  Are we overflowing the stack?
* the page fault doesn't work when in kernel space.  When enabling an EL1 to EL1 sync expception, it fails before getting into the
  handler, the way it used to fail when the floating point unit was not enabled... but I don't think that's the actual problem here...
  It doesn't seem to cause any other exception, in that qemu doesn't log any exceptions, just seems to loop



* I still don't trust the file backed segment calculations.  If there's a better/easier way of loading the binaries and setting up
  segments...


* fix block allocation and tiered table lookups
* add block truncation
* allow for removing directory entries
* add file renaming



* I've tested:
    - superblock alloc_block/free_block
    - superblock alloc_inode/free_inode
    - directory reading
    - directory adding file

* yet to test:
    - superblock/block group writing
    - superblock and group free count being updated correctly
    - everything to do with blocks.rs/zones




* there's a lot of inconsistency between Ext2BlockNumber and BlockNum in ext2 which should be resolved somehow
* it turns out there's a from_le and from_be function for u32 and others, so maybe you can simplify the byteorder stuff using them


* syscall macros need to be more automatic, the entire marshal/unmarshal should be based only on types
* need to handle the case of accessing ".." on a mounted vnode.  It must correctly fetch the parent node
* need a way to maintain a queue for scheduling

* need a way to record memory segment information in the Process/VirtualAddressSpace to distinguish between areas
  that are mapped to static memory vs areas that are mapped to page data (which would need to be freed)


* can you use a weak reference of some kind for the mount link, instead of NonNull?
* there is an issue with the emmc driver such that when the image used with qemu is below 2GB or less, the Read command gives a byte
  offset, but when it's 4GB or larger, it gives a sector offset (byte offset / 512).  I'm not sure if this happens with the pi as well
  since I only have an 8GB card.



* need a way to configure, including only the drivers needed for a specific platform (eg. raspberry pi).  Is there a way to not compile in
  driver modules without defining a feature for each one?
* need a way to configure the GIC and timer in a generic way, for other systems.  Especially the IRQ handler tie-in (directly calls GIC atm)



* add a proper timer driver (ie. fix the hackish ARM timer driver)
* implement the GIC driver/module
* add functions to delay by a set number of microseconds (might need to use the internal counter)

* get the app linker script working better (can you align to 4KB instead of 64KB)
* can you make an improvement on DeviceRegisters, or should you just use tock-registers


