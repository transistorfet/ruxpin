
WHAT IFS:

* what if you added json for procfs's data, to make it easier to parse?  What if you made json and/or unixstd file formats a compile
  time feature flag?  What if procfs (and all the others) where their own crates with their own feature flags, that are tied together
  by a toplevel config crate (ie. the breakup into crates)
* can you separate the syscalls, maybe even based on permission levels as well as function, and require permission for each api to
  be granted explicitly, so that APIs security-wise are opt-in, kind of like a web api, or like WASI


HIGH PRIORITY ISSUES:

* need to rethink segments a bit, since they now need to be changed.  Currently, vmalloc controls the
  memory mapping, and segments are Arcs which are cloned when a process is forked
* share_segement function isn't being used, because we're using Arcs instead

* need to sort out the tty devices. how irqs can access the device object. whether only the tty subsystem or the driver as well, has
  a reference to the devices as well. how the config will create the device object, and where it stores it (or does it assume each
  driver will register and save global references to the devices if needed?  Is there a better way than using so many global references?

* need a way to configure, including only the drivers needed for a specific platform (eg. raspberry pi).  Is there a way to not compile in
  driver modules without defining a feature for each one?



TODO:

* need to add heap support to the applications
* add threading support

* add more data to procfs
* add . and .. to procfs, as well as devfs and tmpfs
* add mounts to procfs (and make mount command)
* add arrow key support to canonical input
* add an events system for processes to wait on (IO blocking, process exit, select/poll, etc)
* need to handle the case of accessing ".." on a mounted vnode.  It must correctly fetch the parent node

* add commands: cp, echo, mkdir, mv, ps, pwd, rm, mount, umount


LOWER PRIORITY ISSUES:

* syscall macros need to be more automatic, the entire marshal/unmarshal should be based only on types.  The macros need a lot of
  work to improve, possibly even using proc macros (eg. an attribute on a syscall function that automagically generates the decoding
  and calling for that function

* sort out issues of copying to/from user space
* there is no userspace/kernelspace copying in the api, which could cause a fatal error if the user program doesn't give a valid
  input, so at some point this needs to be added
* does the linux copy user/kernel function do manual page lookups, including triggering page loading?  Or does it do soemthing else?

* if you put separate locks on the fields of proc, or sub-arc<locks> on at least files and space, so that either can be manipulated
  independently (so a syscall that locks the proc to write a file can still handle a page fault that tries to lock the same proc to
  load the next page

* there is an issue with the emmc driver such that when the image used with qemu is below 2GB or less, the Read command gives a byte
  offset, but when it's 4GB or larger, it gives a sector offset (byte offset / 512).  I'm not sure if this happens with the pi as well
  since I only have an 8GB card.  If there was a way to detect the card size, this could be solved



FILESYSTEM TODO:

* add block truncation
* allow for removing directory entries
* add file renaming


* I've tested:
    - superblock alloc_block/free_block
    - superblock alloc_inode/free_inode
    - directory reading
    - directory adding file

* yet to test:
    - superblock/block group writing
    - superblock and group free count being updated correctly
    - everything to do with blocks.rs/zones

* there's a lot of inconsistency between Ext2BlockNumber and BlockNum in ext2 which should be resolved somehow


LOW PRIORITY TODO:

* it turns out there's a from_le and from_be function for u32 and others, so maybe you can simplify the byteorder stuff using them
* can you use a weak reference of some kind for the mount link, instead of NonNull?

* add a proper timer driver (ie. fix the hackish ARM timer driver)
* add functions to delay by a set number of microseconds (might need to use the internal counter), for use by drivers

* get the app linker script working better (can you align to 4KB instead of 64KB)
* can you make an improvement on DeviceRegisters, or should you just use tock-registers

