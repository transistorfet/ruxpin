

* unify bufcache and page cache
* implement page cache and fix segments
* for multi-core support, you first need per-cpu memory allocation (and maybe go into rust before kernel_start)


HIGH PRIORITY ISSUES:

* for bufcache, and the issue of block size vs page size, you could maybe make it so that all bufcaches are page sized, but it will give
  the filesystem whatever block size it requests by returning a subslice of the actual page
* need to eventually convert kmalloc to use the paging system (with a kernel page flag if necessary)
* need to merge the bufcache and page cache

* once the page cache is in place, you can make the entire binary file cacheable such that you wont need to copy data the way you are in
  the elf loader for the program headers when reading in the file
* when a segment is copied, it only copies the pages loaded into memory at that time, and puts 0 for all other pages, but that means when
  those pages are loaded, they will be duplicated.  The solution is to have a cache for each file/exec that is being used which holds a
  reference to each page, and once it is dropped, those pages will be freed, and when a page is loaded, the cache is searched first.  I'm
  not yet sure how I'd like to implement this, and I still haven't exactly figured out how other OSes do it
* fix the sbrk growing/shrinking
* need to change how segments are shared, and how pages are shared (need a page cache)

* should you have a heap in the kernel with mapped pages, and if so, where in virtual memory would it be located?

* need to fix the data segment/heap/sbrk stuff because it doesn't change the stack size, and there is no checking or
  support for stack resizing or allocating new stacks in the address space, which is needed for multithread stacks
* can you replace the process vec with a hashmap?  The issue is iterating over the list for procfs readdir support

* should you split the api into a linux one and a ruxpin-specific one that is very rusty?  If you did, it would make sense to
  make the various api's modular and external to the kernel, in their own crates


TODO:

* implement page cache

* add a function to libapp to help parse simple command line arguments

* implement api getcwd()
* implement vfs::link()
* make methods on File for fs operations (including unlink/rename?), so you don't have to always use vfs::read(file)

* add networking
* add threading support in api
* think about multicore and what that would mean for everything

* add an events system for processes to wait on (IO blocking, process exit, select/poll, etc)
* fix the blocking/unblocking code (including exits) to use multiple queues and an event system of some sorts to improve the performance of checks

* add a stack guard page to each stack segment, with permissions/mapping in the translation table such that it will cause a fault
  instead of crashing into the adjacent segment.  Linux has this adjustable in size I think
* fix the ugly stack manipulation used for the command line arguments.  Can you make one set of arguments available to the process and also
  to procfs (via the task record)?

* add more data to procfs
* add mounts to procfs (and make mount command)

* add arrow key support to canonical input

* add commands: cp, pwd, mount, umount


ISSUES:

* think about threads.  I think linux makes every system thread a process with optional sharing of memory and file descriptors, but I
  had been thinking of making thredas separate, making them scheduled, and since there could be a current thread and a current process
  tracked separately by their respective managers (first thing in queue), then a page fault wouldn't have to look up the context, and
  a system call that accessed files would have to fetch both (but not find one via the others)

* need to sort out the tty devices. how irqs can access the device object. whether only the tty subsystem or the driver as well, has
  a reference to the devices as well. how the config will create the device object, and where it stores it (or does it assume each
  driver will register and save global references to the devices if needed?  Is there a better way than using so many global references?

* there's an issue with serial input on the hardware, where it wont show up until a certain number of keys are pressed, but it's a bit
  unpredictable.  I think it might be an issue with when the interrupt occurs based on the buffer fullness??  Could be totally wrong

* sort out issues of copying to/from user space
* there is no userspace/kernelspace copying in the api, which could cause a fatal error if the user program doesn't give a valid
  input, so at some point this needs to be added
* does the linux copy user/kernel function do manual page lookups, including triggering page loading?  Or does it do soemthing else?

* there is an issue with the emmc driver such that when the image used with qemu is below 2GB or less, the Read command gives a byte
  offset, but when it's 4GB or larger, it gives a sector offset (byte offset / 512).  I'm not sure if this happens with the pi as well
  since I only have an 8GB card.  If there was a way to detect the card size, this could be solved

* should the api be an external crate that integrates the public interfaces (only) of the kernel?

* should you move SyscallFunction type to libapi, since the functions are defined there?  Could you use generics for the syscall itself?
  How will that work for saving the syscall in the task/process?  Could you make a separate place to save that data in the api, on a
  per-task basis?


WHAT IFS:

* how could I make it more event-oriented rather than traditional unixy

* what if you added json for procfs's data, to make it easier to parse?  What if you made json and/or unixstd file formats a compile
  time feature flag?  What if procfs (and all the others) where their own crates with their own feature flags, that are tied together
  by a toplevel config crate (ie. the breakup into crates)

* how would you isolate the unix-specific aspects of the api such that you could implement a light unix-to-ruxpin
  shim on the user process side (or even on the kernel side), so that the ruxpin-native api is not constrained by
  unix but is compatible enough to be source compatible.  Things like waitpid, which take a pointer to the location to put the status,
  it would be nice to have a safer means of passing back data
* can you separate the syscalls, maybe even based on permission levels as well as function, and require permission for each api to
  be granted explicitly, so that APIs security-wise are opt-in, kind of like a web api, or like WASI
* I'm leaning a lot more to the idea of splitting up the APIs into different groups with a different svc number for
  each.  The aarch64 stuff can have the svc-to-api decoding because it might need to be platform specific



FILESYSTEM TODO:

* add block truncation
* allow for removing directory entries
* add file renaming


* I've tested:
    - superblock alloc_block/free_block
    - superblock alloc_inode/free_inode
    - directory reading
    - directory adding file

* yet to test:
    - superblock/block group writing
    - superblock and group free count being updated correctly
    - everything to do with blocks.rs/zones

* there's a lot of inconsistency between Ext2BlockNumber and BlockNum in ext2 which should be resolved somehow


LOW PRIORITY TODO:

* modify the proc macro for encoding system calls to be a bit cleaner (not have to put the {} at the end, fit it all in one line, etc)
* there is currently no checking for illegal characters in each path component
* fix rename on ext2 to more intelligently rename (if the parents are the same and the direntry can be reuse, then do that)

* it turns out there's a from_le and from_be function for u32 and others, so maybe you can simplify the byteorder stuff using them
* can you use a weak reference of some kind for the mount link, instead of NonNull?

* add a proper timer driver (ie. fix the hackish ARM timer driver)
* add functions to delay by a set number of microseconds (might need to use the internal counter), for use by drivers

* get the app linker script working better (can you align to 4KB instead of 64KB)
* can you make an improvement on DeviceRegisters, or should you just use tock-registers

